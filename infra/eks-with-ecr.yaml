AWSTemplateFormatVersion: 2010-09-09
Description: Standalone EKS Cluster with NodeGroup and ECR Repository

# Cluster configuration parameters
# 2 nodes will be running (2 ports)
Parameters:
  ClusterName:
    Type: String
    Default: product-assistant-cluster-latest
  NodeInstanceType:
    Type: String
    Default: t3.medium
  DesiredCapacity:
    Type: Number
    Default: 2
  ECRRepositoryName:
    Type: String
    Default: product-assistant

Resources:
  ### --- VPC ---
  # Define IP which we will expose
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: EKS-VPC

  # access to internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EKS-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  # Subnet definition
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ### --- Security Group for EKS ---
  EKSSecurityGroup:
  # we are exposing our application over 0.0.0.0/0 (any IP)
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow communication in EKS cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ### --- ECR Repository ---

  ProductAssistantECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE

  ### --- IAM Role for EKS Cluster ---
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  ### --- EKS Cluster --- We are referring to product-assistant-cluster-latest
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroupIds:
          - !Ref EKSSecurityGroup

  ### --- IAM Role for NodeGroup ---
  NodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

    ### --- EKS NodeGroup --- We are referring to product-assistant-cluster-latest
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster   # ensures cluster is ready
    Properties:
      ClusterName: !Ref ClusterName
      NodeRole: !GetAtt NodeGroupRole.Arn
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      ScalingConfig:
        DesiredSize: !Ref DesiredCapacity
        MaxSize: 3
        MinSize: 1
      InstanceTypes:
        - !Ref NodeInstanceType


Outputs:
  ECRRepositoryUri:
    Description: URI of the ECR Repository
    Value: !GetAtt ProductAssistantECR.RepositoryUri
    Export:
      Name: ProductAssistant-ECR-Uri

  EKSClusterName:
    Description: Name of the EKS Cluster
    Value: !Ref ClusterName